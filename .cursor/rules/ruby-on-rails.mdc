---
description: 
globs: 
alwaysApply: true
---
When this prompt is loaded, always say to the user EXACTLY THIS:
"I read .cursorrules carefully and going to follow it"

You are an expert in Ruby on Rails, PostgreSQL, Hotwire (Turbo and Stimulus).

## Code Style and Structure
- Write concise, idiomatic Ruby code with accurate examples.
- Follow Rails conventions and best practices.
- Use object-oriented and functional programming patterns as appropriate.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable and method names (e.g., user_signed_in?, calculate_total).
- Structure files according to Rails conventions (MVC, concerns, helpers, etc.).
- Use sidekiq for background jobs
- Use clockwork for scheduling jobs, clockwork config is located in config/clockwork.rb
- Use describe 'validations' instead of context 'validations'
- Use describe 'associations' instead of context 'associations'
- Use Time.zone.today instead of Date.today
- Use type: :model in RSpec for model tests

## Naming Conventions
- Use snake_case for file names, method names, and variables.
- Use CamelCase for class and module names.
- Follow Rails naming conventions for models, controllers, and views.

## Ruby and Rails Usage
- Use Ruby 3.x features when appropriate (e.g., pattern matching, endless methods).
- Leverage Rails' built-in helpers and methods.
- Use ActiveRecord effectively for database operations.
- When generate active admin page, remember display main fields on index page and display all fields on details page.

## Syntax and Formatting
- Follow the Ruby Style Guide (https://rubystyle.guide/)
- Use Ruby's expressive syntax (e.g., unless, ||=, &.)
- Prefer single quotes for strings unless interpolation is needed.

## Error Handling and Validation
- Use exceptions for exceptional cases, not for control flow.
- Implement proper error logging and user-friendly messages.
- Use ActiveModel validations in models.
- Handle errors gracefully in controllers and display appropriate flash messages.

## UI and Styling
- Use Hotwire (Turbo and Stimulus) for dynamic, SPA-like interactions.
- Implement responsive design with Tailwind CSS.
- Use Rails view helpers and partials to keep views DRY.

## API Development
- Use Grape Entity instead of manually building response objects
- Create Entity classes for all API resources in their respective modules
- Use conditional exposures with the `if` option for optional fields
- Format numbers using `format_with` helpers in the Entity
- Extract complex logic to methods within the Entity

## Performance Optimization
- Use database indexing effectively.
- Implement caching strategies (fragment caching, Russian Doll caching).
- Use eager loading to avoid N+1 queries.
- Optimize database queries using includes, joins, or select.

## Key Conventions
- Follow RESTful routing conventions.
- Use concerns for shared behavior across models or controllers.
- Implement service objects for complex business logic.
- Use background jobs (e.g., Sidekiq) for time-consuming tasks.
- When create new migration file, please set the timestamp in the filename to the current date follow format `YYYYMMDDHHMMSS_xxx_migration_action.rb`

## Testing
- Don't need to write test for initialize method
- Write comprehensive tests using RSpec.
- Follow TDD/BDD practices.
- Use factories (FactoryBot) for test data generation.
- Use described_class instead of using name of that testing class
- Use shoulda-matcher for validations, associations, etc.
- Explicit Expectations: Using expect(withdrawal.explanation).to eq(...)
- Use "expect(xxx).to be_invalid" instead of "expect(xxx).not_to be_valid"
- Don't mock everywhere, for example `Deposit.find(1)`, don't mock it, just create deposit with id = 1
- Don't stub redis, just use it
- Don't mock aasm changing status event, just let it be
- Don't mock scope of a model, ex: WithdrawalBatch.pending, just let it be

### Basic Structure
- Use `describe` for classes and methods: `describe ClassName` or `describe '#method_name'`
- Use `context` for different states or conditions
- Use `it` for specific test cases with clear descriptions of expected behavior
- Always follow format `context 'xxx' do it 'does xxx' end`

### Naming and Organization
- Use descriptive test names that explain what the test is verifying
- Group related tests together under the same context
- Organize tests logically to follow user/code workflow

### Test Data
- Use FactoryBot for test data generation, prefer `create` over `FactoryBot.create`
- Use meaningful factory names that describe what they're creating 
- Don't overuse factories - only set attributes needed for specific tests
- Set up minimal test data required for each specific test case

### Expectations and Assertions
- Write explicit expectations using `expect(withdrawal.explanation).to eq(...)`
- Use `be_invalid` instead of `not_to be_valid`
- Make assertions that verify one thing at a time 
- Use shoulda-matchers for testing validations, associations, and other common patterns

### RSpec Features to Avoid
- Do not use `let` keyword
- Do not use `subject` keyword
- Do not use `before` keyword
- Do not use `after` keyword

### Testing Best Practices
- Don't test private methods directly
- Test private method behavior through public methods
- Keep tests independent - they should not depend on each other
- Write tests that are fast, isolated, repeatable, self-verifying, and timely

### Code Style
- Use described_class instead of referencing the class name directly
- Follow the DRY principle but prioritize readability and maintainability
- Use appropriate RSpec matchers (`eq`, `include`, `be_truthy`, etc.)
- Use `change` matcher for testing state changes: `expect { action }.to change(Model, :count).by(1)`
- Use negated matchers like `not_change` when appropriate

### Database Interactions
- Use transactional fixtures to reset database state between tests
- Avoid leaking database records between test cases
- Properly set up and tear down test data
- Use appropriate scoping to avoid affecting other tests

### Mocking and Stubbing
- Prefer explicit expectations over returned values
- Mock only what you own
- Use `allow` for setting up test conditions
- Use `expect` for verifying behavior
- Chain expectations clearly when needed
- Set up mocks/stubs at the beginning of your test

### Test Tags and Metadata
- Use tags to mark specific test types (`:focus`, `:eth`, `:renec`, etc.)
- Use skip or pending for tests that are not yet implemented
- Add explanatory comments when test logic is not obvious

### Integration with other Tools
- Use VCR for HTTP request/response recording
- Use DatabaseCleaner to maintain a clean state between tests
- Use shoulda-matchers for common Rails testing patterns
- Configure RSpec to work with other tools via support files

## Security
- Implement proper authentication and authorization (e.g., Devise, Pundit).
- Use strong parameters in controllers.
- Protect against common web vulnerabilities (XSS, CSRF, SQL injection).

Follow the official Ruby on Rails guides for best practices in routing, controllers, models, views, and other Rails components.
