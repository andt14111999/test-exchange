// Ensure functions are available globally
window.showTradeConfirm = function (action, tradeId, tradeData) {
  const actionText = action === "cancel" ? "H·ªßy" : "Ho√†n th√†nh";
  const actionVerb = action === "cancel" ? "h·ªßy" : "ho√†n th√†nh";

  let moneyFlowText = "";
  let warningText = "";

  if (action === "cancel") {
    // Cancel logic: money returns to original holders
    if (tradeData.fiat_token_deposit) {
      moneyFlowText = `
        <div class="money-flow-info">
          <h4>üí∞ Lu·ªìng ti·ªÅn khi h·ªßy:</h4>
          <p>‚Ä¢ <strong>Fiat Token Deposit:</strong> ${
            tradeData.fiat_amount
          } ${tradeData.fiat_currency.toUpperCase()} s·∫Ω ƒë∆∞·ª£c ho√†n tr·∫£ v·ªÅ t√†i kho·∫£n fiat c·ªßa <strong>Ng∆∞·ªùi mua</strong></p>
          <p>‚Ä¢ <strong>Crypto:</strong> ${
            tradeData.coin_amount
          } ${tradeData.coin_currency.toUpperCase()} s·∫Ω ƒë∆∞·ª£c gi·∫£i ph√≥ng v·ªÅ t√†i kho·∫£n crypto c·ªßa <strong>Ng∆∞·ªùi b√°n</strong></p>
        </div>
      `;
    } else if (tradeData.fiat_token_withdrawal) {
      moneyFlowText = `
        <div class="money-flow-info">
          <h4>üí∞ Lu·ªìng ti·ªÅn khi h·ªßy:</h4>
          <p>‚Ä¢ <strong>Fiat Token Withdrawal:</strong> ${
            tradeData.fiat_amount
          } ${tradeData.fiat_currency.toUpperCase()} s·∫Ω ƒë∆∞·ª£c m·ªü kh√≥a v·ªÅ t√†i kho·∫£n fiat c·ªßa <strong>Ng∆∞·ªùi b√°n</strong></p>
          <p>‚Ä¢ <strong>Crypto:</strong> ${
            tradeData.coin_amount
          } ${tradeData.coin_currency.toUpperCase()} s·∫Ω ƒë∆∞·ª£c ho√†n tr·∫£ v·ªÅ t√†i kho·∫£n crypto c·ªßa <strong>Ng∆∞·ªùi mua</strong></p>
        </div>
      `;
    } else {
      // Normal trade
      moneyFlowText = `
        <div class="money-flow-info">
          <h4>üí∞ Lu·ªìng ti·ªÅn khi h·ªßy:</h4>
          <p>‚Ä¢ <strong>Crypto:</strong> ${
            tradeData.coin_amount
          } ${tradeData.coin_currency.toUpperCase()} s·∫Ω ƒë∆∞·ª£c ho√†n tr·∫£ v·ªÅ t√†i kho·∫£n c·ªßa <strong>Ng∆∞·ªùi b√°n</strong></p>
          <p>‚Ä¢ <strong>Fiat:</strong> Ng∆∞·ªùi mua t·ª± x·ª≠ l√Ω thanh to√°n ƒë√£ th·ª±c hi·ªán (n·∫øu c√≥)</p>
        </div>
      `;
    }
    warningText =
      '<div class="warning-text">‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!</div>';
  } else {
    // Release logic: complete the trade
    if (tradeData.fiat_token_deposit) {
      moneyFlowText = `
        <div class="money-flow-info">
          <h4>üí∞ Lu·ªìng ti·ªÅn khi ho√†n th√†nh:</h4>
          <p>‚Ä¢ <strong>Fiat Token Deposit:</strong> ${
            tradeData.fiat_amount
          } ${tradeData.fiat_currency.toUpperCase()} s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω v√† chuy·ªÉn ƒë·∫øn ƒë√≠ch</p>
          <p>‚Ä¢ <strong>Crypto:</strong> ${
            tradeData.coin_amount
          } ${tradeData.coin_currency.toUpperCase()} s·∫Ω ƒë∆∞·ª£c chuy·ªÉn cho <strong>Ng∆∞·ªùi mua</strong></p>
        </div>
      `;
    } else if (tradeData.fiat_token_withdrawal) {
      moneyFlowText = `
        <div class="money-flow-info">
          <h4>üí∞ Lu·ªìng ti·ªÅn khi ho√†n th√†nh:</h4>
          <p>‚Ä¢ <strong>Fiat Token Withdrawal:</strong> ${
            tradeData.fiat_amount
          } ${tradeData.fiat_currency.toUpperCase()} s·∫Ω ƒë∆∞·ª£c r√∫t v·ªÅ t√†i kho·∫£n ng√¢n h√†ng c·ªßa <strong>Ng∆∞·ªùi b√°n</strong></p>
          <p>‚Ä¢ <strong>Crypto:</strong> ${
            tradeData.coin_amount
          } ${tradeData.coin_currency.toUpperCase()} s·∫Ω ƒë∆∞·ª£c chuy·ªÉn cho <strong>Ng∆∞·ªùi mua</strong></p>
        </div>
      `;
    } else {
      // Normal trade
      moneyFlowText = `
        <div class="money-flow-info">
          <h4>üí∞ Lu·ªìng ti·ªÅn khi ho√†n th√†nh:</h4>
          <p>‚Ä¢ <strong>Crypto:</strong> ${
            tradeData.coin_amount
          } ${tradeData.coin_currency.toUpperCase()} s·∫Ω ƒë∆∞·ª£c chuy·ªÉn cho <strong>Ng∆∞·ªùi mua</strong></p>
          <p>‚Ä¢ <strong>Fiat:</strong> ${
            tradeData.fiat_amount
          } ${tradeData.fiat_currency.toUpperCase()} ƒë√£ ƒë∆∞·ª£c thanh to√°n b·ªüi ng∆∞·ªùi mua</p>
        </div>
      `;
    }
    warningText =
      '<div class="success-text">‚úÖ Giao d·ªãch s·∫Ω ƒë∆∞·ª£c ho√†n th√†nh v√† kh√¥ng th·ªÉ ho√†n t√°c!</div>';
  }

  const modalHtml = `
    <div id="trade-confirm-modal" class="trade-modal-overlay">
      <div class="trade-modal-content">
        <div class="trade-modal-header">
          <h3>${actionText} Giao d·ªãch #${tradeData.ref}</h3>
          <button class="trade-modal-close" onclick="closeTradeConfirm()">&times;</button>
        </div>
        
        <div class="trade-modal-body">
          <div class="trade-info">
            <p><strong>Ng∆∞·ªùi mua:</strong> ${tradeData.buyer_name}</p>
            <p><strong>Ng∆∞·ªùi b√°n:</strong> ${tradeData.seller_name}</p>
            <p><strong>Tr·∫°ng th√°i hi·ªán t·∫°i:</strong> <span class="status-badge status-${
              tradeData.status
            }">${getStatusText(tradeData.status)}</span></p>
          </div>
          
          ${moneyFlowText}
          ${warningText}
          
          <div class="confirmation-question">
            <p><strong>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ${actionVerb} giao d·ªãch n√†y kh√¥ng?</strong></p>
          </div>
        </div>
        
        <div class="trade-modal-footer">
          <button class="btn btn-secondary" onclick="closeTradeConfirm()">H·ªßy b·ªè</button>
          <button class="btn btn-${
            action === "cancel" ? "danger" : "primary"
          }" onclick="confirmTradeAction('${action}', ${tradeId})">
            ${actionText} Giao d·ªãch
          </button>
        </div>
      </div>
    </div>
  `;

  // Remove existing modal if any
  const existingModal = document.getElementById("trade-confirm-modal");
  if (existingModal) {
    existingModal.remove();
  }

  // Add modal to body
  document.body.insertAdjacentHTML("beforeend", modalHtml);

  // Show modal
  document.getElementById("trade-confirm-modal").style.display = "flex";
};

window.closeTradeConfirm = function () {
  const modal = document.getElementById("trade-confirm-modal");
  if (modal) {
    modal.remove();
  }
};

window.confirmTradeAction = function (action, tradeId) {
  const url =
    action === "cancel"
      ? `/admin/trades/${tradeId}/cancel_trade`
      : `/admin/trades/${tradeId}/release_trade`;

  // Create form and submit
  const form = document.createElement("form");
  form.method = "POST";
  form.action = url;

  // Add CSRF token
  const csrfToken = document
    .querySelector('meta[name="csrf-token"]')
    .getAttribute("content");
  const csrfInput = document.createElement("input");
  csrfInput.type = "hidden";
  csrfInput.name = "authenticity_token";
  csrfInput.value = csrfToken;
  form.appendChild(csrfInput);

  document.body.appendChild(form);
  form.submit();

  closeTradeConfirm();
};

window.getStatusText = function (status) {
  const statusMap = {
    awaiting: "Ch·ªù x·ª≠ l√Ω",
    unpaid: "Ch∆∞a thanh to√°n",
    paid: "ƒê√£ thanh to√°n",
    disputed: "Tranh ch·∫•p",
    released: "ƒê√£ ho√†n th√†nh",
    cancelled: "ƒê√£ h·ªßy",
    cancelled_automatically: "T·ª± ƒë·ªông h·ªßy",
  };
  return statusMap[status] || status;
};

// Close modal when clicking outside
document.addEventListener("click", function (event) {
  const modal = document.getElementById("trade-confirm-modal");
  if (modal && event.target === modal) {
    closeTradeConfirm();
  }
});

// Close modal with ESC key
document.addEventListener("keydown", function (event) {
  if (event.key === "Escape") {
    closeTradeConfirm();
  }
});
